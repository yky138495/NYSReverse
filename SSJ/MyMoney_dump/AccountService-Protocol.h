//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class AccountBookVo, AccountInfoVo, AccountVo, CorporationVo, KDAccount, MemberVo, NSArray, NSDate, NSDecimalNumber, NSDictionary, NSString, ProjectVo;

@protocol AccountService <NSObject>
- (AccountVo *)defaultTransferInAccountWithTransferOutAccount:(AccountVo *)arg1;
- (NSArray *)withdrawTransfers:(NSArray *)arg1 withLog:(NSString *)arg2;
- (_Bool)copyBalances:(NSArray *)arg1 intoAccountBook:(AccountBookVo *)arg2;
- (_Bool)withdraw:(NSDecimalNumber *)arg1 fromAccount:(AccountVo *)arg2 andDeposit:(NSDecimalNumber *)arg3 toAccount:(AccountVo *)arg4 atDate:(double)arg5 withProject:(ProjectVo *)arg6 corporation:(CorporationVo *)arg7 member:(MemberVo *)arg8 creditor:(CorporationVo *)arg9 memo:(NSString *)arg10 photoName:(NSString *)arg11 log:(NSString *)arg12;
- (_Bool)changeBalanceToAmount:(NSDecimalNumber *)arg1 inAccount:(AccountVo *)arg2 withMemo:(NSString *)arg3;
- (_Bool)changeBalanceToAmount:(NSDecimalNumber *)arg1 inAccount:(AccountVo *)arg2 withMemo:(NSString *)arg3 createTime:(double)arg4;
- (NSArray *)serializationTransactionalAccountList:(NSArray *)arg1;
- (_Bool)renameAssociateAccountsWithoutMycardSuffix:(NSArray *)arg1;
- (NSString *)logOfOperationWithExpenseVoID:(long long)arg1;
- (long long)lastLocalTransationId;
- (_Bool)mergedAccount:(long long)arg1 withMainAccount:(long long)arg2 action:(int)arg3 duplicateTransactions:(NSArray *)arg4;
- (_Bool)isExistAccountForAskDebt;
- (NSArray *)toAccountsForLoanAskDebt;
- (NSArray *)fromAccountsForLoanAskDebt;
- (_Bool)isExistAccountForLoanPayDebt;
- (NSArray *)toAccountsForLoanPayDebt;
- (NSArray *)fromAccountsForLoanPayDebt;
- (_Bool)isExistAccountForLoanLend;
- (NSArray *)toAccountsForLoanLend;
- (NSArray *)fromAccountsForLoanLend;
- (_Bool)isExistAccountForLoanBorrow;
- (NSArray *)toAccountsForLoanBorrow;
- (NSArray *)fromAccountsForLoanBorrow;
- (NSArray *)issuingInstituteListFromPlistWithGroup:(int)arg1 isFavorate:(_Bool)arg2;
- (AccountVo *)valueObjectFromKDAccount:(KDAccount *)arg1;
- (NSDecimalNumber *)debtAccountBalance;
- (NSDecimalNumber *)creditCardAccountBalance;
- (NSDecimalNumber *)creditAccountBalance;
- (NSDecimalNumber *)virtualAccountBalance;
- (NSDecimalNumber *)financialAccountBalance;
- (NSDecimalNumber *)cashAccountBalance;
- (NSDecimalNumber *)savingAccountBalance;
- (NSDecimalNumber *)accountValueById:(long long)arg1 withType:(long long)arg2;
- (NSDecimalNumber *)accountBalanceById:(long long)arg1 withType:(long long)arg2;
- (NSDecimalNumber *)liabillityAccountValueById:(long long)arg1;
- (NSDecimalNumber *)creditAccountValueById:(long long)arg1;
- (NSDecimalNumber *)assetAccountBalanceById:(long long)arg1;
- (NSDecimalNumber *)accountAssetsAmountBetweenStart:(double)arg1 andEnd:(double)arg2 Id:(long long)arg3;
- (NSDecimalNumber *)assetsAmountWithoutHiddenAccountBetweenStart:(double)arg1 andEnd:(double)arg2;
- (NSDecimalNumber *)assetsAmountBetweenStart:(double)arg1 andEnd:(double)arg2;
- (NSDecimalNumber *)liabilityAmountWithoutHiddenWithJCTAccountsSupported:(_Bool)arg1;
- (NSDecimalNumber *)liabilityAmountWithJCTAccountsSupported:(_Bool)arg1;
- (NSDecimalNumber *)liabilityAmount;
- (NSDecimalNumber *)assetAmountWithoutHiddenWithJCTAccountsSupported:(_Bool)arg1;
- (NSDecimalNumber *)assetAmountWithJCTAccountsSupported:(_Bool)arg1;
- (NSDecimalNumber *)assetAmount;
- (NSArray *)currencyCodes;
- (_Bool)addTransactionWhenAccountBalanceChanged:(AccountVo *)arg1 memo:(NSString *)arg2;
- (_Bool)addTransactionWhenAccountBalanceChanged:(AccountVo *)arg1 newAccount:(_Bool)arg2;
- (long long)withdraw:(NSDecimalNumber *)arg1 fromAccount:(AccountVo *)arg2 andDeposit:(NSDecimalNumber *)arg3 toAccount:(AccountVo *)arg4 atDate:(double)arg5 withProject:(ProjectVo *)arg6 memo:(NSString *)arg7 photoName:(NSString *)arg8 log:(NSString *)arg9;
- (long long)withdraw:(NSDecimalNumber *)arg1 fromAccount:(AccountVo *)arg2 andDeposit:(NSDecimalNumber *)arg3 toAccount:(AccountVo *)arg4 atDate:(double)arg5 withProject:(ProjectVo *)arg6 memo:(NSString *)arg7 photoName:(NSString *)arg8;
- (_Bool)updateTransactionWithTransactionId:(long long)arg1 logOfOperation:(NSString *)arg2;
- (_Bool)withdraw:(NSDecimalNumber *)arg1 fromAccount:(AccountVo *)arg2 andDeposit:(NSDecimalNumber *)arg3 toAccount:(AccountVo *)arg4 atDate:(double)arg5 withProject:(ProjectVo *)arg6 corporation:(CorporationVo *)arg7 member:(MemberVo *)arg8 creditor:(CorporationVo *)arg9 memo:(NSString *)arg10 photoName:(NSString *)arg11;
- (_Bool)withdraw:(NSDecimalNumber *)arg1 fromAccount:(AccountVo *)arg2 andDeposit:(NSDecimalNumber *)arg3 toAccount:(AccountVo *)arg4 atDate:(double)arg5 withProject:(ProjectVo *)arg6 withCreditor:(CorporationVo *)arg7 memo:(NSString *)arg8 photoName:(NSString *)arg9;
- (_Bool)transferAmount:(NSDecimalNumber *)arg1 FromAccount:(AccountVo *)arg2 toAccount:(AccountVo *)arg3 atDate:(double)arg4 withProject:(ProjectVo *)arg5 corporation:(CorporationVo *)arg6 member:(MemberVo *)arg7 creditor:(CorporationVo *)arg8 memo:(NSString *)arg9 photoName:(NSString *)arg10;
- (_Bool)transferAmount:(NSDecimalNumber *)arg1 FromAccount:(AccountVo *)arg2 toAccount:(AccountVo *)arg3 atDate:(double)arg4 withProject:(ProjectVo *)arg5 withCreditor:(CorporationVo *)arg6 memo:(NSString *)arg7 photoName:(NSString *)arg8;
- (_Bool)transferAmount:(NSDecimalNumber *)arg1 FromAccount:(AccountVo *)arg2 toAccount:(AccountVo *)arg3 atDate:(double)arg4 withProject:(ProjectVo *)arg5 memo:(NSString *)arg6;
- (NSDecimalNumber *)calculateBalanceByAccountId:(long long)arg1;
- (_Bool)setAccountValue:(NSDecimalNumber *)arg1 withAccountId:(long long)arg2;
- (_Bool)setAccountValue:(NSDecimalNumber *)arg1 withAccountId:(long long)arg2 updateLastUpdateTime:(_Bool)arg3;
- (_Bool)setAccounts:(NSArray *)arg1 balances:(NSArray *)arg2;
- (_Bool)setAccountBalance:(NSDecimalNumber *)arg1 withAccountId:(long long)arg2;
- (_Bool)setAccountBalance:(NSDecimalNumber *)arg1 withAccountId:(long long)arg2 updateLastUpdateTime:(_Bool)arg3;
- (AccountInfoVo *)accountInfoWithId:(long long)arg1;
- (NSArray *)accountGroupNameExceptCredit;
- (NSArray *)accountGroupNameExceptCreditAndLiability;
- (AccountVo *)accountWithId:(long long)arg1;
- (AccountVo *)accountByUUID:(NSString *)arg1;
- (AccountVo *)accountByName:(NSString *)arg1;
- (AccountVo *)accountById:(long long)arg1 withJCTAccountsSupported:(_Bool)arg2;
- (NSDictionary *)accountsByIds:(NSArray *)arg1;
- (AccountVo *)accountById:(long long)arg1;
- (NSDate *)lastestTradeTimeByAccountId:(long long)arg1;
- (NSDate *)oldestTradeTimeByAccountId:(long long)arg1;
- (NSArray *)accountNames;
- (NSArray *)serializationTransactionalAccountsByFirstLevelGroupId:(long long)arg1;
- (NSArray *)transactionalAccountsByFirstLevelGroupId:(long long)arg1;
- (NSArray *)accountsWithoutParentBySecondLevelGroupId:(long long)arg1;
- (NSArray *)accountsByFirstLevelGroupId:(long long)arg1;
- (NSArray *)listAccountExceptCreditAndLiability;
- (_Bool)accountGroupExist:(int)arg1;
- (NSArray *)accountsWithGrouptype:(int)arg1;
- (NSArray *)transactionalAccountsWithSecondLevelAccountGroupId:(long long)arg1 hidden:(_Bool)arg2;
- (NSArray *)transactionalAccountsWithGrouptype:(int)arg1 hidden:(_Bool)arg2 includeCreditCard:(_Bool)arg3;
- (NSArray *)transactionalAccountsWithGrouptype:(int)arg1 hidden:(_Bool)arg2;
- (NSArray *)accountsWithGrouptype:(int)arg1 hidden:(_Bool)arg2;
- (NSArray *)allSerializableTransactionalAccountsWithoutHidden;
- (NSDictionary *)visibleAccountsDictionary;
- (NSArray *)allTransactionalAccountsWithoutHidden;
- (NSArray *)allAccountsWithoutHidden;
- (NSArray *)allAccountsInOrder;
- (NSArray *)allAccounts;
- (NSArray *)subAccountsOfAccount:(long long)arg1;
- (NSArray *)listTransactionalAccountWithoutHiddenOrderByLastUpdateTime;
- (NSArray *)listAccountWithoutHiddenAndSubAccountsOrderByLastUpdateTimeWithJCTAccountsSupported:(_Bool)arg1;
- (NSArray *)listAccountWithoutHiddenAndSubAccountsWithJCTAccountsSupported:(_Bool)arg1;
- (NSArray *)listAccountWithoutHiddenAndSubAccountsOrderByLastUpdateTime;
- (NSArray *)listAccountWithoutHiddenAndSubAccounts;
- (NSArray *)listTransactionalAccountOrderByLastUpdateTime;
- (NSArray *)listAccountWithoutSubAccountsOrderByLastUpdateTime;
- (NSArray *)listAccountWithoutSubAccounts;
- (NSArray *)listTransactionalAccountWithoutHidden;
- (NSArray *)listAccountWithoutHiddenWithJCTAccountsSupported:(_Bool)arg1;
- (NSArray *)listAccountWithoutHidden;
- (NSArray *)listTransactionalAccount;
- (NSArray *)listAccountWithJCTAccountsSupported:(_Bool)arg1;
- (NSArray *)listAccount;
- (_Bool)setAccount:(long long)arg1 withHidden:(_Bool)arg2;
- (_Bool)deleteAccount:(long long)arg1 error:(id *)arg2;
- (void)updateAccountOrders:(NSArray *)arg1;
- (_Bool)updateAccount:(AccountVo *)arg1;
- (long long)addAccount:(AccountVo *)arg1;
@end

